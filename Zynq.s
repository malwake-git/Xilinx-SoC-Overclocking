//
//.global initc
//initc:
//			ldr     r3, [r11, #-44]");
//			r3, r3, #2");
//			ldr     r2, [r11, #-64]");
//			add     r3, r2, r3");
//			ldr     r3, [r3]");
//			mov     r2, #0");
//			mov     r6, r3");
//			mov     r7, r2");
//			ldr     r3, [r11, #-44]");
//			add     r3, r3, #1");
//			lsl     r3, r3, #2");
//			ldr     r2, [r11, #-64]");
//			add     r3, r2, r3");
//			ldr     r3, [r3]");
//			mov     r2, #0");
//			mov     r8, r3");
//			mov     r9, r2");
//			ldr     r3, [r11, #-48]");
//			lsl     r3, r3, #3");
//			ldr     r2, [r11, #-56]");
//
//			Status = XClock_PllDiv(value_PLL-(1<<8));
//			asm("   mul     r2, r8, r7");
//			asm("   mul     r3, r6, r9");
//			asm("   add     r3, r2, r3");
//			asm("   umull   r4, r5, r6, r8");
//			//asm("   add     r3, r3, r5");
//			Status = XClock_PllDiv(value_PLL+(0<<8));
//			asm("   mov     r5, r3");
//			asm("   strd    r4, r5, [r1]");
//			asm("   ldr     r3, [r11, #-44]");
//			//SendBuffer_32_mul[Index] = ((u64)RecvBuffer_32[cnt] * (u64)RecvBuffer_32[cnt+1]);
////
////			asm("   lsl     r3, r3, #2");
////			asm("   ldr     r2, [r11, #-64]");
////			asm("   add     r3, r2, r3");
////			asm("   ldr     r3, [r3]");
////			asm("   mov     r2, #0");
////			asm("   str     r3, [r11, #-180]");
////			asm("   str     r2, [r11, #-176]");
////			asm("   ldr     r3, [r11, #-44]");
////			asm("   add     r3, r3, #1");
////			asm("   lsl     r3, r3, #2");
////			asm("   ldr     r2, [r11, #-64]");
////			asm("   add     r3, r2, r3");
////			asm("   ldr     r3, [r3]");
////			asm("   mov     r2, #0");
////			asm("   str     r3, [r11, #-188]");
////			asm("   str     r2, [r11, #-184]");
////			asm("   ldr     r3, [r11, #-48]");
////			asm("   lsl     r3, r3, #3");
////			asm("   ldr     r2, [r11, #-60]");
////			asm("   add     r3, r2, r3");
////			asm("   ldr     r2, [r11, #-180]");
////			asm("   ldrd    r0, r1, [r11, #-188]");
////			asm("   mov     r12, r0");
////			Status = XClock_PllDiv(value_PLL-(1<<8));
////			asm("   adds    r2, r2, r12");
////			Status = XClock_PllDiv(value_PLL+(0<<8));
////			asm("   str     r2, [r11, #-196]");
////			asm("   ldr     r2, [r11, #-176]");
////			asm("   adc     r2, r2, r1");
////			asm("   str     r2, [r11, #-192]");
////			asm("   ldrd    r0, r1, [r11, #-196]");
////			asm("   strd    r0, r1, [r3]");
////			asm("   ldr     r3, [r11, #-44]");
